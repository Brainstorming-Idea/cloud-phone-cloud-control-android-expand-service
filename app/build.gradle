import java.security.MessageDigest

apply plugin: 'com.android.application'

android {

    //系统签名文件
    signingConfigs {
        config {
            keyAlias 'key0'
            keyPassword '123456'
            storeFile file('/demo.jks')
            storePassword '123456'
        }
    }

    compileSdkVersion 28
    buildToolsVersion "28.0.0"
    defaultConfig {
        applicationId "com.cloud.control.expand.service"
        minSdkVersion rootProject.ext.libMinSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.config
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions -Wno-format"
                arguments '-DANDROID_PLATFORM=android-23', '-DANDROID_STL=c++_shared' ,"-DANDROID_ARM_NEON=TRUE"
            }
        }
        ndk {
            // abiFilters "arm64-v8a", "armeabi-v7a"
            abiFilters   "arm64-v8a", "armeabi-v7a"
            ldLibs "jnigraphics"
        }
    }

    dataBinding {
        enabled true
    }

    def STRING = "String"
    def APP_HOST = "APP_HOST"

    buildTypes {
        debug {
            signingConfigs.config
            debuggable true
            buildConfigField(STRING, APP_HOST, '"http://14.215.128.98:8011/"')
            buildConfigField "boolean", 'IS_DEBUG', 'true'
        }
        release {
            signingConfigs.config
            debuggable false
            minifyEnabled true
            buildConfigField(STRING, APP_HOST, '"http://"')
            buildConfigField "boolean", 'IS_DEBUG', 'false'
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //android studio 3.0
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name.equals('release')) {
                outputFileName = "${APK_FILE_NAME}.apk"
            } else if (variant.buildType.name.equals('debug')) {
                outputFileName = "${APK_FILE_NAME}.apk"
            }
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation fileTree(include: ['*.aar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    //BigDecimalMath
    implementation files('libs/big-math-2.3.0.jar')
    testImplementation 'junit:junit:4.12'
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportVersion}"
    implementation "com.android.support:recyclerview-v7:${rootProject.ext.supportVersion}"
    implementation "com.android.support:cardview-v7:${rootProject.ext.supportVersion}"
    implementation "com.android.support:support-v4:${rootProject.ext.supportVersion}"
    implementation "com.android.support:design:${rootProject.ext.supportVersion}"
    // rxjava
    implementation 'io.reactivex:rxjava:1.1.9'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    implementation 'com.trello:rxlifecycle:1.0'
    implementation 'com.trello:rxlifecycle-components:1.0'
    implementation 'com.tbruyelle.rxpermissions:rxpermissions:0.9.1@aar'
    implementation 'com.artemzin.rxjava:proguard-rules:1.1.9.0'//rxjava 混淆
    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    //rx系列与View生命周期同步
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'
    //rxbinding
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
    //rx 6.0权限请求
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
    //network
    implementation 'com.squareup.okhttp3:okhttp:3.1.2'
    implementation 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.1.2'
    //json解析
    implementation 'com.google.code.gson:gson:2.8.5'
    //eventbus
    implementation 'org.greenrobot:eventbus:3.1.1'
    //    //阿里路由框架
    //    implementation "com.alibaba:arouter-api:1.4.1"
    //dagger
    implementation 'com.google.dagger:dagger:2.6'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.6'
    //butterknife
    implementation 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    implementation 'com.github.ybq:Android-SpinKit:1.4.0'
    // recyclerview-animators
    implementation 'jp.wasabeef:recyclerview-animators:2.2.3'
    //glide
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation project(path: ':RecyclerViewHelper')
    implementation files('libs/SystemTime.jar')
}
def archives = [
        [
                'src' : 'https://paddlelite-demo.bj.bcebos.com/libs/android/paddle_lite_libs_v2_6_1.tar.gz',
                'dest': 'PaddleLite'
        ],
        [
                'src' : 'https://paddlelite-demo.bj.bcebos.com/libs/android/opencv-4.2.0-android-sdk.tar.gz',
                'dest': 'OpenCV'
        ],
        [
                'src' : 'https://paddleocr.bj.bcebos.com/deploy/lite/ocr_v1_for_cpu.tar.gz',
                'dest' : 'src/main/assets/models'
        ]
]

task downloadAndExtractArchives(type: DefaultTask) {
    doFirst {
        println "Downloading and extracting archives including libs and models"
    }
    doLast {
        // Prepare cache folder for archives
        String cachePath = "cache"
        if (!file("${cachePath}").exists()) {
            mkdir "${cachePath}"
        }
        archives.eachWithIndex { archive, index ->
            MessageDigest messageDigest = MessageDigest.getInstance('MD5')
            messageDigest.update(archive.src.bytes)
            String cacheName = new BigInteger(1, messageDigest.digest()).toString(32)
            // Download the target archive if not exists
            boolean copyFiles = !file("${archive.dest}").exists()
            if (!file("${cachePath}/${cacheName}.tar.gz").exists()) {
                ant.get(src: archive.src, dest: file("${cachePath}/${cacheName}.tar.gz"))
                copyFiles = true; // force to copy files from the latest archive files
            }
            // Extract the target archive if its dest path does not exists
            if (copyFiles) {
                copy {
                    from tarTree("${cachePath}/${cacheName}.tar.gz")
                    into "${archive.dest}"
                }
            }
        }
    }
}
preBuild.dependsOn downloadAndExtractArchives
